[{"title":"FreeRTOS学习笔记","date":"2025-05-07T10:51:32.000Z","url":"/2025/05/07/FreeRTOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","tags":[["STM32","/tags/STM32/"],["学习笔记","/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"categories":[["嵌入式","/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"]],"content":"主要学习FreeRTOS的基本操作。"},{"title":"STM32学习笔记","date":"2025-05-07T06:50:36.000Z","url":"/2025/05/07/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","tags":[["STM32","/tags/STM32/"],["学习笔记","/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"categories":[["嵌入式","/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"]],"content":"主要学习了STM32C8T6的基本配置以及其各部件组成。 Q：哈希体系和冯洛伊曼体系区别：前者是指令集和数据存储在不同存储器，后者是存储在同一个存储器 计算机五大组成部分：控制器、运算器、存储器、输入、输出 STM32是小端存储，高地址的数据在低字节上 nullSTM32F103C8T6基本配置 null内容 STM32最小系统版组成：MCU、时钟电路、复位电路、外部接口电路、电源电路，启动电路。 内核：Cortex-M3，32位处理器内核，最大寻址位2^32=4GB字节； Flash：64K字节； SRAM：20K字节； 2个ADC、4个定时器、2个IIC、2个SPI、3个USART、1个CAN nullQ：Cotex-M3寄存器组的用法 R0~R12为通用寄存器；R13是主堆栈指针（MSP）和进程堆栈（PSP）；R14是连接寄存器（LR），R15是程序计数器（PC） R0—R3用于传参； R4—R11用于保存局部变量； R12内部暂时调用寄存器； R13栈，别名：SP； R14用于保存函数返回地址，别名：LR； R15用于跳转到下一个执行的命令，别名：PC； nullQ：STM32F1与F4的区别？ 内核 ：F1是M3，F4是M4 主频：F1最大主频是72MHz，F4最大主频是168MHz 浮点：F1无浮点计算，F4有 功能：F4外设比F1功能更强大 nullSTM32的五个时钟源 null内容 HSI是高速内部时钟，RC振荡器，频率8MHz，精度不高 HSE是高速外部时钟，可接石英/陶瓷谐振器，频率4~16MHz LSI是低速内部时钟，RC振荡器，频率40KHz，通过低功耗时钟 LSE是低速外部时钟，石英晶体，频率32.768KHz PLL是锁相环倍频输出，时钟源可以为HSI / 2、HSE、HSE / 2，可倍频2~16倍，最大72MHz nullQ：设置系统时钟的基本流程？ 打开外部高速时钟，设置Flash等待操作 设置APB1、APB2、AHB分频系数 设置CFGR寄存器确认PLL的时钟来源和倍频系数 使能PLL并将系统时钟切换到PLL nullSTM32启动过程 null内容 通过Boot引脚设定，寻找起始地址 初始化栈指针 __initial_sp 指向复位程序 Reset_Handler 设置异常中断 HardFault_Handler 设置系统时钟 SystemInit 调用C的程序 __main nullGPIO null内容 四种输入：上拉输入、下拉输入、浮空输入、模拟输入 四种输出：通用推挽、复用推挽、通用开漏、复用开漏 APB1总线控制DA、USB、I2C、SPI、CAN、串口2345、普通TIM APB2总线控制AD、串口1、IO、高级TIM2 nullQ：开漏与推挽的区别？ 推挽可以正常输出高低电平，开漏只能输出低电平，高电平呈现高阻态，需接上拉电阻。 null蜂鸣器 null内容 有源蜂鸣器：内部自带振荡电路，将正负极接上直流电压即可发声，频率固定。 无源蜂鸣器：内部不带振荡电路，需要控制器提供振荡脉冲发生，频率不固定。 null中断 null内容 EXIT(Extern Interrupt)：外部中断 NVIC(Nested Vector Interrupt Control)：嵌套向量中断控制器 本质：程序运行时，EXIT监听指定GPIO电平，一旦发生改变，CPU会暂停当前任务并保存现场，向NVIC发出中断请求，去处理中断程序；当中断程序处理完成后，恢复现场，继续执行。 nullQ：STM32支持多少个外部中断？ 19个外部中断，但只有7个中断服务函数。 nullQ：中断和异常？ 中断通常由外部硬件设备产生，如IO中断，时钟中断等；异常通常由CPU内部产生，如数组越界，除零操作等。 nullTIMER null内容 16位计数器、预分频器、自动重装寄存器的时基单元，在72MHz时钟可以实现最大59.65s的定时。 基础定时器：只支持计数 通用/高级定时器：向上计数、向下计数、中央对齐 定时器计数频率：CK_CNT=CLCKPSC+1 定时器计数频率：CK\\_CNT = \\frac{CLCK}{PSC + 1} 定时器计数频率：CK_CNT=PSC+1CLCK​ nullQ：如何设置一个20ms定时器？ 使用HCLK = 72MHz，预分频系数PSC = 7199，可得CK_CNT = 1KHz = 1ms，只需要计数20次即可。 nullQ：如何开启定时器？ 开启RCC时钟 选择时基单元的时钟源 配置预分频系数和自动重装载值 配置输出中断控制和NVIC，打开通道 使能定时器 nullADC null内容 Analog - Digital Converter：模拟 - 数字转换器 12位逐次逼近型ADC，1us转换时间 输入电压：0 ~ 3.3V，转换范围：0 ~ 4095 AD转换的步骤：采样、保持、量化、编码 nullQ：STM32 ADC的总转换时间如何计算 T = 采样时间 + 12.5个ADC周期（12个周期量化） nullFlash null内容 Flash特性：写数据只能将1写成0，不能将0写成1（擦除是0-&gt;1），因此要写新数据，需要先擦除。 每块 每扇页 每页 16扇页 16页 256 Byte 常见的Flash型号（了解即可） 型号 W25Q80 W25Q64 W25Q32 块 16页 32 64 扇区 256 512 1024 页 4096 8192 16384 总字节数 1M Byte 2M Byte 4M Byte 页&lt;扇区&lt;块&lt;芯片 常用的Flash擦写规则 最小擦除：扇区 可选择擦除：块、扇区、全片 最大写入单位：页（不能跨页写入） 最小写入单位：1 Byte 未写入时FLASH全为1，即0xFF 只能1-&gt;0写入，不能0-&gt;1写入，如果写过了，则需要再擦除 nullQ：NOR Flash和NAND Flash区别？ NOR Flash随机读取，NAND Flash块读取；NOR读得比NAND快，但写和擦除操作慢，容量小，价格贵。 null存储器之间对照 SRAM：静态随机存储，不需要定时刷新充电，存储速度快，容量小，掉电失效 DRAM：动态随机存储，需要定时刷新充电，价格比SRAM便宜，但访问速度慢，耗电量大 E2PROM：带电可擦除可编辑只读存储器，断电后仍能保存信息，块擦除 FLASH（ROM）：闪存，存取速度慢，容量大，掉电不失效，扇区擦除 nullDMA null内容 Direct Memory Access：直接存储器存取 用途：可以提供外设或存储器和存储器之间高速数据传输，无需CPU干预，节省CPU资源 TIP：使用DMA往往需要获取当前剩余数据量，根据设置的接收buffer大小减去当前剩余数据量，得到当前接收数据大小 STM32F103C8T6 DMA资源： DMA1 Q：DMA的传输模式有哪些？ DMA_Mode_Circle 循环模式（GPS、蓝牙） DMA_Mode_Normal 正常缓存模式 null通信协议总览 名称 双工 时钟 电平 设备 引脚 UART 全双工 异步 单端 点对点 TX、RX I2C 半双工 同步 单端 多设备 SCL、SDA SPI 全双工 同步 单端 多设备 SCLK、MOSI、MISO、CS CAN 半双工 异步 差分 多设备 CAN_H、CAN_L USB 半双工 异步 差分 点对点 DP、DM nullUART null内容 串口通信，异步 低位先行：若发送信息0X0F，则传输数据位是1111 0000，最终接收信息0X0F 过程：波特率对齐（比特率=波特率 * log2（N)，N是二进制位数）；起始一个低电平信号表示开始发送数据，接着是8个数据位，然后是校验位（奇/偶/NONE），最后是高电平表示停止位（0.5/1/1.5/2） nullQ：串口通信如何配置？ 串口时钟使能，GPIO时钟使能 串口复位 TX的GPIO设置为复用推挽，RX的GPIO设置为浮空输入 串口参数初始化（波特率，数据位，校验位，收发模式） 开启中断并初始化NVIC 使能串口 编写串口函数 nullQ：描述下RS232和RS485的区别？ TTL（全双工）：0V表示0，+3.3V~+5V表示1 RS232（全双工）：+3V ~ +15V表示0，-3V ~ -15V表示1，（TTL通过RS232芯片） RS485（半双工）：两线压差-2V ~ -6V表示0，+2V ~ +6V表示1（TTL通过RS485芯片） nullI2C null内容 Inter IC BUS（同步、半双工），支持一主多从和多主多从（MSB高位先行） 两根通信线：SCL（Serial Clock）、SDA（Serial Data），上拉电阻一般4.7K~10K STM32支持7/10位地址模式 nullQ：I2C总线在传输过程中有哪些类型信号？ 开始信号：SCL高电平，SDA由高到低，开始发送数据 结束信号：SCL高电平，SDA由低到高，结束发送数据 应答信号：SCL高电平，发送8Bit数据，接收端向发送端发低电平，表示成功接收（在接收前需要释放SDA） TIP：SDA电平切换只出现在SCL低电平阶段，不要搞混 nullQ：I2C的软硬件模式怎么配置？ 硬件模式：复用开漏输出，不接上下拉；内部有固定I2C结构；有通信速率设置 软件模式：复用开漏输出，上拉电阻；通过GPIO模拟I2C信号；没有通信速率配置，需要自己写一个delay。 nullQ：I2C的仲裁机制？ “线与”操作（&amp;&amp;），即低电平优先，谁先发送低电平，谁就对总线占有控制权。 nullQ：I2C的从机设备地址ID、写地址、读地址？ null特定地址写 null当前地址读 nullSPI null内容 Serial Peripheral Interface：串行外设接口（MSB先行） 四根通信线：SCLK（Serial Clock）、MOSI（Master Output Slave Input）、MISO（Master Input Slave Output）、CS 输入为上拉或浮空输入，输出配置为推挽输出。 起止条件：CS高电平切换到低电平 终止条件：CS低电平切换到高电平 发送信息：CS一直为低电平 nullQ：四种工作模式 时钟极性CPOL（上升沿/下降沿）；时钟相位CPHA（第一个边沿/第二个边沿） CPOL = 0 ------&gt;上升沿 CPOL = 1 ------&gt; 下降沿 CPHA = 0 ------&gt;第一个边沿 CPHA = 1 ------&gt; 第二个边沿 nullQ：如何确定使用哪个模式 看从机空闲状态是低电平还是高电平，来确认CPOL；再从从机芯片时序图里确认何时采取数据。 下图解释：在没有进入Cycle时，通过SPICLK是高低电平来判断CPOL；CPHA通过正中间的那个边沿判断。 null看门狗 null内容 看门狗监控程序运行状态，当程序因为设计漏洞、硬件故障导致出现卡死等问题时，看门狗可以及时复位程序；本质是定时器，在指定范围内，程序没有执行喂狗（重置计数器），看门狗硬件会自动产生复位信号。 独立看门狗（IWDG）：独立工作，对时间精度要求低。 窗口看门狗（WWDG）：能产生系统复位信号和提前唤醒中断。 nullCAN null内容 CAN总线（Controller Area Network Bus）控制器局域网总线。 一个节点包括3个部分：微处理MCU、CAN控制器、CAN收发器。（CAN_H、CAN_L为双绞线） 开环网络两端必须有2.2KΩ的终端电阻；闭环网络两端必须有120Ω的终端电阻（抗干扰作用）； （信号到终端被电阻吸收，避免反射回干扰下一次信号，所以一般都是放两端） CAN BUS（右边那一块）上的总线电平称为隐形电平和显性电平。 nullIOS11898标准 名称 性质 逻辑 CAN_H CAN_L 两条线上的电压差 Recessive 隐性 逻辑1 2.5V 2.5V 0 Dominant 显性 逻辑0 3.5V 1.5V 2V 多个节点一起开始发送，会涉及到总线仲裁。 nullCAN帧的种类 序号 名称 帧用途 1 数据帧 用于发送单元向接收单元传送数据的帧。 2 遥控帧 用于接收单元向具有相同 ID 的发送单元请求数据的帧。 3 错误帧 用于当检测出错误时向其它单元通知错误的帧。 （硬件自动完成） 4 过载帧 当一个节点正忙于处理接收的信息,可以通知其它节点暂缓发送新报文。（硬件自动完成） 5 帧间隔 用于将数据帧及远程帧与前面的帧分离开来的帧（硬件自动完成） 每个节点都可以自己发送帧（帧是CAN协议规定发送或接收的单位） 序号 名称 描述 1 帧起始 表示帧的开始，产生一个bit的显性电平 2 仲裁段 表示帧的优先级， 由标识符（ID）和传送帧类型(RTR)组成 3 控制段 表示数据的字节数，由6个bit构成 4 数据段 数据的具体内容，可发送0～8 个字节的数据 5 CRC段 用于校验传输是否正确 6 ACK段 表示确认是否正常接收（0为应答） 7 帧结束 表示此帧结束 仲裁段：可以根据配置好的设置，自动判断要不要接收报文，该方案也叫作过滤，判断依据是每个报文的ID。 标准格式的标识符长度为11位，拓展格式是29位 RTR位，它来表明是数据帧（0）还是远程帧（1） IDE表明此帧是标准帧（0）还是拓展帧（1）。 控制段：控制段表示数据段的字节数。 保留位（r0、r1），必须全部以显性电平发送，但接收方可以接收显性、隐性的各种组合。 数据长度码（Data Link Control），数据字节必须为0-8字节，但接收方对数据字节数=9~15的情况并不视为错误。 数据段：0-8个字节数据，CAN控制器有对应的寄存器。 位填充机制：当检测到五个连续相同的位信号，实际发送会自动插入一个补码，位填充区域为SOF到CRC结束之间 null仲裁方案 在总线空闲时，最先开始发送的节点获得发送权，一旦开始发送，不会被其他节点抢占。 多个节点同时开始发送时，各发送节点从仲裁段的第一位开始进行仲裁。连续输出显性电平最多的节点可继续发送。(从左到右，Dominant ：显性优先) 具有相同ID的数据帧和远程帧在总线上竞争时，仲裁段的最后一位（RTR）为显性位的数据帧具有优先权可继续发送。 标准格式ID与具有相同ID的远程帧或者扩展格式的数据帧在总线上竞争时，标准格式的RTR 位为显性位的具有优先权可继续发送。 nullCAN过滤器配置 过滤模式：列表模式和掩码模式 列表模式：列出ID名称，判断ID是否一致来判断是否接受或者丢弃，受到列表容量大小限制。 掩码模式：确定ID特定位的值来判断是否接受或丢弃，不受列表容量大小限制。 配置过滤器，有三个重要的寄存器：CAN_FSIR、CAN_FxR1、CAN_FxR2 nullCAN总线错误分类 nullCubeMX配置 1、配置波特率 位数据段：同步段----传播段（补偿CAN网络的物理延迟）----相位缓冲段1----相位缓冲段2（补偿相位误差） 可能会有早到的，也可能会有晚到的，通过上面的四段可以进行拉长缩小来操作。 CAN波特率=TQ∗(TBS1+TBS2+SJY)=APB总线频率∗(TBS1+TBS2+SJY)分频系数 CAN波特率=TQ*(TBS1 + TBS2 + SJY) \\\\ \\\\ = \\frac{APB总线频率 * (TBS1 + TBS2 + SJY)}{分频系数} CAN波特率=TQ∗(TBS1+TBS2+SJY)=分频系数APB总线频率∗(TBS1+TBS2+SJY)​ 2、打开CAN的接受中断，两个接收邮箱、三个发送邮箱。"},{"title":"如何做一个这样的网站","date":"2025-05-06T18:46:26.471Z","url":"/2025/05/07/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%B8%AA%E8%BF%99%E6%A0%B7%E7%9A%84%E7%BD%91%E7%AB%99/","tags":[["学习笔记","/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["hexo","/tags/hexo/"]],"categories":[["网页","/categories/%E7%BD%91%E9%A1%B5/"]],"content":"null这个人太懒了，根本就妹写正文呀！还是来看看可爱猫猫吧！ null学习参考 搭建1：hexo史上最全搭建教程-CSDN博客 搭建2：使用Hexo在GitHub Pages上搭建部署免费的个人博客网站（下：Hexo部署）——最详细全面解读教程（没有之一） - 简书 hexo主题：Themes | Hexo 处理公式问题：Hexo折腾系列（六）数学公式渲染优化 - 江风引雨の小po站 图床工具参考1：Home - SM.MS | Dashboard 图床工具参考2：【Typora】github-与PicGO搭建图床-CSDN博客 添加音乐：3-hexo 添加音乐插件 | 叶落阁 表格未居中问题暂未解决，CSS美化？ null关于上传hexo d出现err: Error: Spawn failed报错问题 打开博客目录内的_config.yml配置文件，将自己的github的https仓库地址修改为自己github的SSH地址"},{"title":"使用新域名后不加载主题","date":"2025-05-06T18:41:39.994Z","url":"/2025/05/07/%E4%BD%BF%E7%94%A8%E6%96%B0%E5%9F%9F%E5%90%8D%E5%90%8E%E4%B8%8D%E5%8A%A0%E8%BD%BD%E4%B8%BB%E9%A2%98/","tags":[["学习","/tags/%E5%AD%A6%E4%B9%A0/"],["hexo","/tags/hexo/"]],"categories":[["网页","/categories/%E7%BD%91%E9%A1%B5/"]],"content":"null心路历程 看了一圈CSDN，基本上都是抄抄改改，只有几个还有点负责心，但依然没有解决我的问题，差点就放弃了，不过好在通过试错给试出来了。 null解决方法 使用了新域名后，发现网页的CSS和JS都没用了，但本地静态可以正常运行。这个时候需要修改个人博客底下的_config.yml文件，先找到这个地方： 将url改为githubname.github.io，不要出现下一层仓库名。 说明：CSDN上别人的解决方法不适用，是因为我们这个没有单独给出root，切记切记。"},{"title":"Markdown基础用法","date":"2025-05-06T18:29:00.430Z","url":"/2025/05/07/Markdown%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","tags":[["学习笔记","/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"categories":[["Markdown","/categories/Markdown/"]],"content":"Markdown基础用法 null官网网址： 可以下载排字模板和编辑主题。 使用Typora，通过Ctrl+/即可进入Markdown源代码编辑模式。 null标题 #+空格+标题名称-----------一级标题 ##+空格+标题名称---------二级标题 ###+空格+标题名称--------三级标题 ####+空格+标题名称------四级标题 #####+空格+标题名称------五级标题 ######+空格+标题名称-----六级标题 最大支持六级标题 null字体 对于标准的markdown文本是不支持居中对齐的。不过markdown同时兼容HTML，可以通过HTML语法格式书写来让文本居中对齐。 null引用 ‘&gt;’+加空格+文字 null分割线 1.三个*然后回车 2.三个-（减号）回车 null插入图片 ①本地的图片：英文的！+[图片名称]+（路径） ②网络图：英文的！+[图片名称]+（网络图片地址） 比如： null链接 [点击跳转到+名称]（网站、文件等地址） 比如：我的博客 null列表 ①有序列表；序号（1，①）+英文的句号（.）+输入得内容，然后回车自动补出下一个序号 ②无序列表；减号（-）+空格+输入内容 回车自动补出下一个 null表格 右击创建表格 null代码 Tab键上面的点（·）三个 + 代码类型（java c++ c#等）然后回车 null数学公式 ∑i=0ni2=(n2+n)(2n+1)6 \\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6} i=0∑n​i2=6(n2+n)(2n+1)​ LaTeX公式格式 Markdown快捷键 撤销：Ctrl/Command + Z 重做：Ctrl/Command + Y 加粗：Ctrl/Command + B 斜体：Ctrl/Command + I 标题：Ctrl/Command + Shift + H 无序列表：Ctrl/Command + Shift + U 有序列表：Ctrl/Command + Shift + O 检查列表：Ctrl/Command + Shift + C 插入代码：Ctrl/Command + Shift + K 插入链接：Ctrl/Command + Shift + L 插入图片：Ctrl/Command + Shift + G 查找：Ctrl/Command + F mand + Shift + L 插入图片：Ctrl/Command + Shift + G 查找：Ctrl/Command + F 替换：Ctrl/Command + G"},{"title":"蓝桥杯第十二届心得","date":"2025-05-06T17:35:54.438Z","url":"/2025/05/07/%E8%93%9D%E6%A1%A5%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%8D%95%E7%89%87%E6%9C%BA%E5%BF%83%E5%BE%97/","tags":[["比赛","/tags/%E6%AF%94%E8%B5%9B/"]],"categories":[["嵌入式","/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"]],"content":"感悟 今年的蓝桥杯单片机难吗，不是很难，但注重细心。一分付出，一分收获。今年我有幸参加了第十二届的比赛，但因为自己操作不当，优化代码的过程中删了定时器，没在主函数删了调用函数，导致已经完成的大厦轰然倒塌。自己也很难受，但没办法，希望看到文章的你们不要犯这种低级问题。 Emmmm…，不过后来拿了省一，挺意外的。 新手上路 基础部分的内容，推荐大家去看小蜜蜂老师的视频，讲的很好，网址: . 学习思路 以下是我的学习思路 首先：先学会LED、蜂鸣器、继电器、按键、数码管、数码管位选、串口等基本操作。 其次：ds1302，ds18b20，eeprom(24C02)，PCF8591等。 然后：PWM呼吸灯，DA(因为我刚开始一直没找到)、超声波。 最关键的是一定要做省赛题！实操很重要！ 赛题链接： . 提取码：1234 一些需要注意的点！！ nullLED 首先要说的是LED灯，比如第10届省赛题目中，如果单独点亮LED，会出现原先没有定义的灯跟着一起亮，我的解决方法如下 null延迟delay 本来不想单独拿出来讲的，实在是初学者这里出问题的太多了。 null按键消抖 有时候题目会让你只加1，但你按了按键会出现加的好多，这里推荐一种解决方法 null矩阵按键 我参考的B站一位UP主，写的很好，这里用的是reg52 nullDS13B20 关于ds13b20读取温度，onewire里面的延迟都要增大10-12倍。特别注意的就是，蜜蜂老师那的temp是16位的，LSB、MSB是8位的，还有就是老师那的delay(700)是unsigned int的而不是unsigned char，要特别注意一下。两位小数的读法我建议大家去找找相关内容看看，以免考到。 nullIIC IIC这一块除了DA输出，其他没啥可说的，DA输出参考代码如下(只需要这样然后主函数调用就行，接着你去拿万用表测J3的D/A与GND两个位置就可以得到差不多的数值)： 还有一个点就是应答和非应答。 nullPWM 有些小伙伴可能学了很久都没搞懂PWM是怎么搞的，我举个例子。 首先我们要的是小灯缓慢亮0.5s，缓慢灭0.5s，先定义一个100us的定时器，先经过count走了10次后，time++了，五次后也就是count加了50次(换算也就是50ms)，然后led灯会变一次pwm_duty，也就是小灯的亮度，总共要变10次，也就是0.5s，达到效果。 nullIO和MM模式 省赛我还没看到要求用MM模式的，大多数都是要求IO模式，最好都学一下，MM模式比IO模式多用一个absacc.h的头文件。 结尾 希望看到这篇文章的你，不会和我刚考完一样，感觉自己的付出和回报不成正比，自己的心态很受打击。当我知道没删那个的时候，我当时人直接懵了，手机也摔地上碎屏了，自己付出了很多，和老师与陪自己一起走过来经常交流的赛友们学到了很多，但最后因为一个很小的问题导致这样，自己真的完全接受不了。不过人生总有得有失吧，唉，大家国赛加油！ 最后记得根据题目意思交压缩包，而不是只交了一份hex文件！！！ 最后，青山不改，碧水长流"},{"title":"基于STM32F103的智能平衡车","date":"2025-05-06T17:30:30.000Z","url":"/2025/05/07/%E5%9F%BA%E4%BA%8ESTM32%E7%9A%84%E6%99%BA%E8%83%BD%E5%B9%B3%E8%A1%A1%E8%BD%A6/","tags":[["STM32","/tags/STM32/"],["项目","/tags/%E9%A1%B9%E7%9B%AE/"],["PID","/tags/PID/"]],"categories":[["嵌入式","/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"]],"content":"主要实现基于STM32F103C8T6的HAL库编程PID平衡车项目。 null实物 nullSTM32 CubeMX配置 使用外部高速时钟8MHz，通过PLL倍频到72MHz。 RCC----&gt;HSE、LSE = Crystal/Ceramic Resonator（晶振）----&gt;HCLK = 72MHz null点亮LED 名称 IO HAL配置 LED PC13 GPIO_OUTPUT SYS----&gt;Debug = Serial Wire(下载器就是用的SW方式) Keil中：HAL_GPIO_Write(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); nullOLED 屏的大小为0.96寸，像素点为128*64。 4PIN分别为GND、VCC(3.3V/5V)、SCL(IIC的时钟信号)、SDA(IIC的数据总线)。 名称 IO HAL配置 SDA PB9 I2C1_SCL,OD模式 SCL PB8 I2C1_SDA,OD模式 nullIIC 硬件IIC：上拉输入，开漏输出。(直接用STM32的真实外设) 软件IIC：上拉输入，推挽/开漏输出。（GPIO实现时序） IIC支持一主多从，同步，半双工，每个从机都有其设备地址。 **起始信号：**SCL高电平，SDA从高电平跳到低电平 **停止信号：**SCL高电平，SDA从低电平跳到高电平 ACK信号：SCL高电平，SDA为低（ACK），SDA为高（NACK） null取模软件（PCtoLCD） 设置：“宋体”， 16 * 16，阴码，列行式，逆向，再修改前缀。 nullMPU6050 MPU6050传感器可以同时检测出三轴加速度、三轴角速度以及温度数据，内部集成DMP（Digital Motion Processor数字运动处理器）模块，可以实现滤波、融合处理。 绕IMU的Z轴旋转：航向角yaw，转动y角度 绕IMU的Y轴旋转：航向角pitch，转动p角度 绕IMU的X轴旋转：航向角row，转动r角度 通过IIC通信 名称 IO HAL配置 SDA PB3 GPIO_OUTPUT SCL PB4 GPIO_OUTPUT INT PB5 GPIO_EXIT5 TIP:不用开漏的原因是MPU6050内部有上拉电阻。 null超声波 HC-SR04 超声波测距模块可提供2cm-400cm的非接触式距离感测功能，精度可达到3mm，模块包括超声波发射器、接收器和控制电路。 null工作原理 名称 IO HAL配置 TRIG（输入触发，测距） PA3 GPIO_OUTPUT ECHO（传回信号、计算时间差） PA2 GPIO_EXTI2(外部中断2)，TIM3计数 TIP：为什么上升沿和下降沿都中断（上升时开始计时，下降时结束计时）。 Internal_Clock=HCLKPSC+1 Internal\\_Clock=\\frac{HCLK}{PSC + 1} Internal_Clock=PSC+1HCLK​ NVIC**----&gt;EXTI line2 interrupt = ENABLE** TIM3----&gt;PSC = 71，1MHz = 1us 使用的自动重载器ARR是16位，因此65535us=0.065535s，再乘上340m/s / 2远远超过4m，可用。 null电机驱动 nullTB6612电机 IN1 IN2 直流电机的状态 0 0 制动 0 1 正转 1 0 反转 1 1 制动 nullPWM 全称Pulse Width Modulation(脉宽调制)；实质是在一个方波中，高电平的占比。 名称 IO HAL配置 PWMA PA11 TIM1_CH4，Pulse = 7200 AIN2 PB12 GPIO_OUTPUT AIN1 PB13 GPIO_OUTPUT BIN1 PB14 GPIO_OUTPUT BIN2 PB15 GPIO_OUTPUT PWMB PA8 TIM1_CH1，Pulse = 7200 PWM的频率f=HCLK(PSC+1)(ARR+1)占空比Duty=PulseARR+1f=10KHz，HCLK=72MHz，则PSC=1,ARR=7199 \\\\ PWM的频率f = \\frac{HCLK}{(PSC + 1)(ARR + 1)}\\\\ \\\\ 占空比Duty=\\frac{Pulse}{ARR + 1}\\\\ \\\\ f=10KHz，HCLK=72MHz，则PSC=1,ARR=7199 \\\\ \\\\ PWM的频率f=(PSC+1)(ARR+1)HCLK​占空比Duty=ARR+1Pulse​f=10KHz，HCLK=72MHz，则PSC=1,ARR=7199 null实现函数 null编码器 速度通过脉冲波的方式测量，旋转一圈11个脉冲；两个霍尔传感器A相、B相，可以判断旋转方向。 名称 IO HAL配置 编码器1 PA0、PA1 TIM2—Encoder Mode TI1 and TI2 编码器2 PB6、PB7 TIM4—Encoder Mode TI1 and TI2 Encoder Mode TI1只计算A相上升沿 Encoder Mode TI2只计算B相上升沿 Encoder Mode TI1 and TI2上升沿就计算 TIP：编码器不会出现负数，16位----&gt;-32768~32767，需要用short型，正数为n，负数为32767 - n。 null蓝牙 使用JDY-31蓝牙模块（从机），通过蓝牙转串口通信。 名称 IO HAL配置 RXD PB10 USART3_TX TXD PB11 USART3_RX USART3设置MODE = Asynchronous，波特率位9600Bits/s，8位，无校验位，停止位1位 USART3 global interrupt = ENABLE nullPID null原理 本项目使用串级PID，速度环PI+直立环PD。 θ为当前小车的倾角θ′为倾角微分，即角速度e(k)是速度环中目标速度与当前速度的偏差∑e(k)为偏差的积分项。假如速度环输出为θ1，作为目标角度输入直立环，直立环的输出a直接作用于电机，有如下关系式。直立环输出a=kp∗(θ−θ1)+kd∗θ′速度环输出θ1=kp1∗e(k)+ki1∗∑e(k)因此a=kp∗θ+kd∗θ′−kp∗[kp1∗e(k)+ki1∗∑e(k)] \\theta为当前小车的倾角 \\\\ \\theta^{'}为倾角微分，即角速度 \\\\ e(k)是速度环中目标速度与当前速度的偏差 \\\\ \\sum{e(k)}为偏差的积分项。\\\\ 假如速度环输出为\\theta_1，作为目标角度输入直立环，\\\\ 直立环的输出a直接作用于电机，有如下关系式。\\\\ 直立环输出 a= kp * (\\theta - \\theta_1) + kd *\\theta^{'} \\\\ 速度环输出\\theta_1 = kp_1 * e(k) + ki_1 * \\sum{e(k)}\\\\ 因此a= kp * \\theta + kd *\\theta^{'} - kp * [kp_1 * e(k) + ki_1 * \\sum{e(k)}] \\\\ θ为当前小车的倾角θ′为倾角微分，即角速度e(k)是速度环中目标速度与当前速度的偏差∑e(k)为偏差的积分项。假如速度环输出为θ1​，作为目标角度输入直立环，直立环的输出a直接作用于电机，有如下关系式。直立环输出a=kp∗(θ−θ1​)+kd∗θ′速度环输出θ1​=kp1​∗e(k)+ki1​∗∑e(k)因此a=kp∗θ+kd∗θ′−kp∗[kp1​∗e(k)+ki1​∗∑e(k)] null调整PID 1、确定机械中值，通过它来中和计算出的theta，这个需要自己手动测量。 2、调参P、I、D null直立环PD（输入期望角度、真实角度和角速度） 直立环直接调用公式。 首要要看下希望在什么角度让平衡车返回，以此保持平衡，计算出KP的范围（7200 / 30）；通过将KP置0后，得到此时的gyro_x，计算出KD（7200/2000） 确定极性：向前倾斜时，轮子也向前，则为正确极性。 null速度环PI，输入期望速度、左编码器、右编码器 1、计算偏差值：误差值 = （左+右）- 期望速度 2、低通滤波：误差A = (1-a)×偏差值 + a×上一次的偏差值，再更新上一次的偏差值 3、积分：Encoder_S += 误差A （STM32是离散的数字信号，求积分就是求和） 4、限幅Encoder_S 5、速度环套用公式 KP通过公式换算，KI一般为KP/200； 确定极性：向前倾斜时，轮子速度加快，则为正确极性，反之速度升不上去，则为错误极性。 null转向环PD–&gt;用于转向操作，输入角速度、角度值 null调整P、I、D的效果 调整比例P看什么时候跌倒，主要依靠倾斜角度。 调整微分D看什么时候振荡，若KD过大，则会振荡地严重。其效果就是阻尼，越大越慢。 调整积分I看什么情况下平衡地快，其主要用于消除稳态误差，提高控制精度。 null蓝牙控制 通过蓝牙APP发送0x01（上）、0x05（左）、0x03（右）、0x07（下）等数据分别控制方向。 null跌倒保护 通过MPU6050的roll值，若其值超过设定的界限，则将PWM设为0。 null物体跟随 仅实现直线跟随，方案是借助超声波传回的距离，设置在10-20mm时可以跟随，若超过，则小车保持平衡不动。（功能还在优化，此代码暂并不包含该功能） null其他 TIP1:TIM1-TIM4用完了，如何10ms调用一次呢？答：MPU6050中的INT引脚，修改其采样率为100HZ即可 TIP2:MPU6050会进行自检，若陀螺仪不在水平状态最初状态不为平衡，则不通过，导致其计算结果一直为0，注释掉 nullPID各种算法 1、位置式PID（本方式实际应用） 优点：静态误差小，溢出的影响小。 缺点：计算量很大，累积误差相对大，在系统出现错误的情况下，容易使系统失控，积分饱和。 使用：一般需要结合输出限幅和积分限幅使用。 2、增量式PID 优点：溢出的影响小，在系统出现错误的情况下,影响相对较小（因为只与过去的三次误差有关）,运算量也相对较小。 缺点：有静态误差（因为没有累积误差）。 3、积分分离式PID 积分分离式PID主要是针对位置式PID的积分，引入判断误差大小条件，是否使用积分项。 4、变速积分PID 积分分离式PID 积分的的权重是1或者0，而变积分PID积分的权重会动态变化。取决于偏差，偏差越大，积分越慢。 5、不完全微分PID 微分通过低通滤波。 6、微分先行 微分的作用是预测未来，能够预知变化，做出调整。其实就是先操作微分。 7、死区 输出了量，但是不执行任何动作，也就是输出的量不起作用。 8、梯形积分 积分有余差，消除不了，为了减少余差，提高运算的精度，便有了梯形积分PID。 null查漏补缺 某次面试，HR问我在操作IIC时，MPU6050的地址是多少，给我一下整懵了，平常操作只想着用封装库，反而忘了最基础的东西，结束后就立马去速速学习。 I2C设备的写地址 = I2C设备地址 &lt;&lt; 1 I2C设备的读地址 = (I2C设备地址 &lt;&lt; 1) + 1 如果AD0脚(9脚)接地,设备地址为0x68 如果接V3.3,则设备地址为0x69 使用0x68套用式子 MPU6050写地址（0110 1000&lt;&lt;1 ） =1101 0000，即0xD0 MPU6050读地址（0110 1000&lt;&lt;1+1） =1101 0001，即0xD1"}]